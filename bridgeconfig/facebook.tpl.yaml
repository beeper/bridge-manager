# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: {{ .HungryAddress }}
    # The domain of the homeserver (for MXIDs, etc).
    domain: beeper.local
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true
    # What software is the homeserver running?
    # Standard Matrix homeservers like Synapse, Dendrite and Conduit should just use "standard" here.
    software: hungry
    # Number of retries for all HTTP requests if the homeserver isn't reachable.
    http_retry_count: 4
    # The URL to push real-time bridge status to.
    # If set, the bridge will make POST requests to this URL whenever a user's Facebook MQTT connection state changes.
    # The bridge will use the appservice as_token to authorize requests.
    status_endpoint: null
    # Endpoint for reporting per-message status.
    message_send_checkpoint_endpoint: null
    # Whether asynchronous uploads via MSC2246 should be enabled for media.
    # Requires a media repo that supports MSC2246.
    async_media: true

# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: "http://{{ .ListenAddr }}:{{ .ListenPort }}"

    # The hostname and port where this appservice should listen.
    hostname: {{ .ListenAddr }}
    port: {{ .ListenPort }}
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. SQLite and Postgres are supported.
    # Format examples:
    #   SQLite:   sqlite:filename.db
    #   Postgres: postgres://username:password@hostname/dbname
    database: sqlite:{{.DatabasePrefix}}mautrix-facebook.db
    # Additional arguments for asyncpg.create_pool() or sqlite3.connect()
    # https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.pool.create_pool
    # https://docs.python.org/3/library/sqlite3.html#sqlite3.connect
    # For sqlite, min_size is used as the connection thread pool size and max_size is ignored.
    # Additionally, SQLite supports init_commands as an array of SQL queries to run on connect (e.g. to set PRAGMAs).
    database_opts:
        min_size: 1
        max_size: 1

    # Public part of web server for out-of-Matrix interaction with the bridge.
    public:
        # Whether or not the public-facing endpoints should be enabled.
        enabled: true
        # The prefix to use in the public-facing endpoints.
        prefix: /public
        # The base URL where the public-facing endpoints are available. The prefix is not added
        # implicitly.
        external: http://{{ .ListenAddr }}:{{ .ListenPort }}/public
        # Shared secret for integration managers such as mautrix-manager.
        # If set to "generate", a random string will be generated on the next startup.
        # If null, integration manager access to the API will not be possible.
        shared_secret: {{ .ProvisioningSecret }}
        # Allow logging in within Matrix. If false, users can only log in using the web interface.
        allow_matrix_login: true
        # Segment API key to enable analytics tracking for web server endpoints. Set to null to disable.
        # Currently the only events are login start, success and fail.
        segment_key: null
        # Optional user_id to use when sending Segment events. If null, defaults to using mxID.
        segment_user_id: null

    # The unique ID of this appservice.
    id: {{ .AppserviceID }}
    # Username of the appservice bot.
    bot_username: {{ .BridgeName}}bot
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: Facebook bridge bot
    bot_avatar: mxc://maunium.net/ygtkteZsXnGJLJHRchUwYWak

    # Whether or not to receive ephemeral events via appservice transactions.
    # Requires MSC2409 support (i.e. Synapse 1.22+).
    # You should disable bridge -> sync_with_custom_puppets when this is enabled.
    ephemeral_events: true

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: {{ .ASToken }}
    hs_token: {{ .HSToken }}

# Prometheus telemetry config. Requires prometheus-client to be installed.
metrics:
    enabled: false
    listen_port: 8000

# Manhole config.
manhole:
    # Whether or not opening the manhole is allowed.
    enabled: false
    # The path for the unix socket.
    path: /var/tmp/mautrix-facebook.manhole
    # The list of UIDs who can be added to the whitelist.
    # If empty, any UIDs can be specified in the open-manhole command.
    whitelist:
    - 0

# Bridge config
bridge:
    # Localpart template of MXIDs for Facebook users.
    # {userid} is replaced with the user ID of the Facebook user.
    username_template: "{{ .BridgeName }}_{userid}"
    # Displayname template for Facebook users.
    # {displayname} is replaced with the display name of the Facebook user
    #               as defined below in displayname_preference.
    # Keys available for displayname_preference are also available here.
    displayname_template: "{displayname}"
    # Available keys:
    # "name" (full name)
    # "first_name"
    # "last_name"
    # "nickname"
    # "own_nickname" (user-specific!)
    displayname_preference:
    - name

    # The prefix for commands. Only required in non-management rooms.
    command_prefix: "!fb"

    # Whether or not the Facebook users of logged in Matrix users should be
    # invited to private chats when the user sends a message from another client.
    invite_own_puppet_to_pm: false
    # Whether or not to use /sync to get presence, read receipts and typing notifications
    # when double puppeting is enabled
    sync_with_custom_puppets: false
    # Whether or not to update the m.direct account data event when double puppeting is enabled.
    # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
    # and is therefore prone to race conditions.
    sync_direct_chat_list: false
    # Servers to always allow double puppeting from
    double_puppet_server_map:
        {{ .BeeperDomain }}: {{ .HungryAddress }}
    # Allow using double puppeting from any server with a valid client .well-known file.
    double_puppet_allow_discovery: false
    # Shared secrets for https://github.com/devture/matrix-synapse-shared-secret-auth
    #
    # If set, custom puppets will be enabled automatically for local users
    # instead of users having to find an access token and run `login-matrix`
    # manually.
    # If using this for other servers than the bridge's server,
    # you must also set the URL in the double_puppet_server_map.
    login_shared_secret_map:
        {{ .BeeperDomain }}: "as_token:{{ .ASToken }}"
    # Should presence from Facebook be bridged? This doesn't use the same API as the Android app,
    # so it might be more suspicious to Facebook.
    presence_from_facebook: false
    # Whether or not to update avatars when syncing all contacts at startup.
    update_avatar_initial_sync: true

    # Whether or not the bridge should send a read receipt from the bridge bot when a message has
    # been sent to Facebook.
    delivery_receipts: false
    # Whether or not delivery errors should be reported as messages in the Matrix room.
    delivery_error_reports: false
    # Whether the bridge should send the message status as a custom com.beeper.message_send_status event.
    message_status_events: true
    # Whether to allow inviting arbitrary mxids to portal rooms
    allow_invites: false
    # Whether or not created rooms should have federation enabled.
    # If false, created portal rooms will never be federated.
    federate_rooms: false
    # Settings for backfilling messages from Facebook.
    backfill:
        # Allow backfilling at all?
        enable: true
        # Use MSC2716 for backfilling? If this is disabled, backfilling only happens when syncing threads,
        # and the incremental settings below don't apply.
        #
        # This requires a server with MSC2716 support, which is currently an experimental feature in Synapse.
        # It can be enabled by setting experimental_features -> msc2716_enabled to true in homeserver.yaml.
        msc2716: true
        # Use double puppets for backfilling?
        #
        # If using MSC2716, the double puppets must be in the appservice's user ID namespace
        # (because the bridge can't use the double puppet access token with batch sending).
        #
        # Even without MSC2716, bridging old messages with correct timestamps requires the double
        # puppets to be in an appservice namespace, or the server to be modified to allow
        # overriding timestamps anyway.
        double_puppet_backfill: true
        # The maximum number of conversations that should be synced.
        # Other conversations will be backfilled on demand when the start PM
        # provisioning endpoint is used or when a message comes in from that
        # chat.
        # If set to -1, all conversations will by synced.
        max_conversations: -1
        # The minimum amount of time to wait between syncing each thread. This
        # helps avoid situations where you sync too quickly.
        min_sync_thread_delay: 10
        # If this value is greater than 0, then if the conversation's last
        # message was more than this number of hours ago, then the conversation
        # will automatically be marked it as read.
        # Conversations that have a last message that is less than this number
        # of hours ago will have their unread status synced from Facebook.
        unread_hours_threshold: 720

        # Settings for how quickly to backoff when rate-limits are encountered
        # while backfilling.
        backoff:
            # How many seconds to wait after getting rate limited during a
            # thread list fetch.
            thread_list: 300
            # How many seconds to wait after getting rate limited during a
            # message history fetch.
            message_history: 300

        # Settings for backfills.
        #
        # During initial/incremental sync, the entirety of the thread that is
        # available will be backfilled. For example, on initial sync, about 20
        # messages are included for each thread in the thread list returned by
        # the server. After that, incremental backfills will be run for each of
        # the portals in a round-robin fashion until all portals have been
        # backfilled as configured below.
        incremental:
            # The maximum number of pages to backfill per batch.
            max_pages: 10
            # The maximum number of total pages to backfill per portal.
            # If set to -1, infinite pages will be synced.
            max_total_pages: -1
            # The number of seconds to wait between backfilling each page.
            page_delay: 10
            # The number of seconds to wait after backfilling the batch of
            # messages.
            post_batch_delay: 30

    periodic_reconnect:
        # Interval in seconds in which to automatically reconnect all users.
        # This can be used to automatically mitigate the bug where Facebook stops sending messages.
        # Set to -1 to disable periodic reconnections entirely.
        # Set to a list of two items to randomize the interval (min, max).
        interval: [1800, 10800]
        # What to do in periodic reconnects. Either "refresh" or "reconnect"
        mode: reconnect
        # Should even disconnected users be reconnected?
        always: true
        # Only reconnect if the user has been connected for longer than this value
        min_connected_time: 0
    # The number of seconds that a disconnection can last without triggering an automatic re-sync
    # and missed message backfilling when reconnecting.
    # Set to 0 to always re-sync, or -1 to never re-sync automatically.
    resync_max_disconnected_time: -1
    # The maximum number of conversations that should be synced when we get a
    # message sync error. In general, 1 page (20) is sufficient.
    max_startup_thread_sync_count: 20
    # Whether or not temporary disconnections should send notices to the notice room.
    # If this is false, disconnections will never send messages and connections will only send
    # messages if it was disconnected for more than resync_max_disconnected_time seconds.
    temporary_disconnect_notices: false
    # Disable bridge notices entirely
    disable_bridge_notices: true
    # Should Matrix m.notice-type messages be bridged to Facebook?
    bridge_matrix_notices: true
    on_reconnection_fail:
        # What to do if a reconnection attempt fails? Options: reconnect, refresh, null
        action: reconnect
        # Seconds to wait before attempting to refresh the connection, set a list of two items to
        # to randomize the interval (min, max).
        wait_for: [0, 60]
    # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
    # This field will automatically be changed back to false after it,
    # except if the config file is not writable.
    resend_bridge_info: false
    # When using double puppeting, should muted chats be muted in Matrix?
    mute_bridging: true
    # Whether or not mute status and tags should only be bridged when the portal room is created.
    tag_only_on_create: true
    # If set to true, downloading media from the CDN will use a plain aiohttp client without the usual headers or
    # other configuration. This may be useful if you don't want to use the default proxy for large files.
    sandbox_media_download: true
    # URL to call to retrieve a proxy URL from (defaults to the http_proxy environment variable).
    get_proxy_api_url: null
    # Whether to explicitly set the avatar and room name for private chat portal rooms.
    # If set to `default`, this will be enabled in encrypted rooms and disabled in unencrypted rooms.
    # If set to `always`, all DM rooms will have explicit names and avatars set.
    # If set to `never`, DM rooms will never have names and avatars set.
    private_chat_portal_meta: default
    # Disable generating reply fallbacks? Some extremely bad clients still rely on them,
    # but they're being phased out and will be completely removed in the future.
    disable_reply_fallbacks: true

    # End-to-bridge encryption support options.
    #
    # See https://docs.mau.fi/bridges/general/end-to-bridge-encryption.html for more info.
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: true
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: true
        # Whether to use MSC2409/MSC3202 instead of /sync long polling for receiving encryption-related data.
        appservice: true
        # Require encryption, drop any unencrypted messages.
        require: true
        # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
        # You must use a client that supports requesting keys from other users to use this feature.
        allow_key_sharing: true
        # Options for deleting megolm sessions from the bridge.
        delete_keys:
            # Beeper-specific: delete outbound sessions when hungryserv confirms
            # that the user has uploaded the key to key backup.
            delete_outbound_on_ack: true
            # Don't store outbound sessions in the inbound table.
            dont_store_outbound: false
            # Ratchet megolm sessions forward after decrypting messages.
            ratchet_on_decrypt: true
            # Delete fully used keys (index >= max_messages) after decrypting messages.
            delete_fully_used_on_decrypt: true
            # Delete previous megolm sessions from same device when receiving a new one.
            delete_prev_on_new_session: true
            # Delete megolm sessions received from a device when the device is deleted.
            delete_on_device_delete: true
            # Periodically delete megolm sessions when 2x max_age has passed since receiving the session.
            periodically_delete_expired: true
            # Delete inbound megolm sessions that don't have the received_at field used for
            # automatic ratcheting and expired session deletion. This is meant as a migration
            # to delete old keys prior to the bridge update.
            delete_outdated_inbound: true
        # What level of device verification should be required from users?
        #
        # Valid levels:
        #   unverified - Send keys to all device in the room.
        #   cross-signed-untrusted - Require valid cross-signing, but trust all cross-signing keys.
        #   cross-signed-tofu - Require valid cross-signing, trust cross-signing keys on first use (and reject changes).
        #   cross-signed-verified - Require valid cross-signing, plus a valid user signature from the bridge bot.
        #                           Note that creating user signatures from the bridge bot is not currently possible.
        #   verified - Require manual per-device verification
        #              (currently only possible by modifying the `trust` column in the `crypto_device` database table).
        verification_levels:
            # Minimum level for which the bridge should send keys to when bridging messages from Telegram to Matrix.
            receive: cross-signed-tofu
            # Minimum level that the bridge should accept for incoming Matrix messages.
            send: cross-signed-tofu
            # Minimum level that the bridge should require for accepting key requests.
            share: cross-signed-tofu
        # Options for Megolm room key rotation. These options allow you to
        # configure the m.room.encryption event content. See:
        # https://spec.matrix.org/v1.3/client-server-api/#mroomencryption for
        # more information about that event.
        rotation:
            # Enable custom Megolm room key rotation settings. Note that these
            # settings will only apply to rooms created after this option is
            # set.
            enable_custom: true
            # The maximum number of milliseconds a session should be used
            # before changing it. The Matrix spec recommends 604800000 (a week)
            # as the default.
            milliseconds: 2592000000
            # The maximum number of messages that should be sent with a given a
            # session before changing it. The Matrix spec recommends 100 as the
            # default.
            messages: 10000

            # Disable rotating keys when a user's devices change?
            # You should not enable this option unless you understand all the implications.
            disable_device_change_key_rotation: true

    # Permissions for using the bridge.
    # Permitted values:
    #      relay - Allowed to be relayed through the bridge, no access to commands.
    #       user - Use the bridge with puppeting.
    #      admin - Use and administrate the bridge.
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
        "{{ .UserID }}": "admin"

    relay:
        # Whether relay mode should be allowed. If allowed, `!fb set-relay` can be used to turn any
        # authenticated user into a relaybot for that chat.
        enabled: false
        # The formats to use when sending messages to Messenger via a relay user.
        #
        # Available variables:
        #   $sender_displayname - The display name of the sender (e.g. Example User)
        #   $sender_username    - The username (Matrix ID localpart) of the sender (e.g. exampleuser)
        #   $sender_mxid        - The Matrix ID of the sender (e.g. @exampleuser:example.com)
        #   $message            - The message content
        message_formats:
            m.text: '<b>$sender_displayname</b>: $message'
            m.notice: '<b>$sender_displayname</b>: $message'
            m.emote: '* <b>$sender_displayname</b> $message'
            m.file: '<b>$sender_displayname</b> sent a file'
            m.image: '<b>$sender_displayname</b> sent an image'
            m.audio: '<b>$sender_displayname</b> sent an audio file'
            m.video: '<b>$sender_displayname</b> sent a video'
            m.location: '<b>$sender_displayname</b> sent a location'

facebook:
    device_seed: {{ .ProvisioningSecret }}
    default_region_hint: ODN
    connection_type: WIFI
    carrier: Verizon
    hni: 311390

    mqtt_keepalive: 60

# Python logging configuration.
#
# See section 16.7.2 of the Python documentation for more info:
# https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
logging:
    version: 1
    formatters:
        colored:
            (): mautrix_facebook.util.ColorFormatter
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
            format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
    handlers:
        file:
            class: logging.handlers.RotatingFileHandler
            formatter: normal
            filename: ./logs/mautrix-facebook.log
            maxBytes: 10485760
            backupCount: 10
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: DEBUG
        maufbapi:
            level: DEBUG
        paho:
            level: INFO
        aiohttp:
            level: INFO
    root:
        level: DEBUG
        handlers: [file, console]
